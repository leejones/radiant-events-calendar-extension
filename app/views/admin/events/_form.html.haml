- include_javascript 'controls'
- default_filter_name = "#{@event.filter_id}"
- content_for :page_scripts do
  :plain
    var last_events_calendar_filter = "";
    function show_filter_reference() {
      var filter_type = $F('event_filter_id');
      var popup = $('filter-reference-popup');
      if (last_events_calendar_filter != filter_type) {
        var url = "#{admin_reference_path(:id => 'filters')}";
        var params = "filter_name=" + filter_type;
        new Effect.Highlight('filter-reference-link-event');
        req = new Ajax.Request(url, { method: 'get', parameters: params, evalScripts: true });
      } else {
        center(popup);
        Element.toggle(popup);
      }
      return false;
    }
= error_messages_for :asset
- form_for [:admin, @event] do |f|
  .form-area
    #event_form_area
      %p.title
        %label{:for => 'event_name'} Name
        = f.text_field :name, :class => 'textbox', :maxlength => 255
      %p.title
        %label{:for => 'event_category'}
          Category
          %span.note (optional)
        = text_field_with_auto_complete :event, :category, { :class => 'textbox', :maxlength => 255 }, { :method => :get, :min_chars => 1, :frequency => 0.5 }
      %p.title
        %label{:for => 'event_location'}
          Location
          %span.note (optional)
        = f.text_field :location, :class => 'textbox', :maxlength => 255
      .schedule
        .date
          %p.title
            %label{:for => 'event_date'} Date
            = calendar_date_select_tag 'event[date]', @event.date || Date.today, :time => false, :clear_button => false, :year_range => [0.years.ago, 5.years.from_now], :embedded => true
        .time
          %p.title
            %label{:for => 'event_start_time'}
              Start Time
              %br
              %span.note (optional)
            = f.time_select :start_time, { :default => @event.start_time ? @event.start_time : nil, :time_separator => '', :minute_interval => 15, :include_blank => true, :simple_time_select => true }
        .time
          %p.title
            %label{:for => 'event_end_time'}
              End Time
              %br
              %span.note (optional)
            = f.time_select :end_time, { :default => @event.end_time ? @event.end_time : nil, :time_separator => '', :minute_interval => 15, :include_blank => true, :simple_time_select => true }
        .timezone
          %p.title
            %label{:for => 'event_timezone'} Timezone
            = f.time_zone_select :timezone
      %p.title
        %label{:for => 'event_description'} Description
        ~ f.text_area 'description', :class => 'textbox', :size => '60x10'
      %p.title
        %label{:for => 'event_filter_id'} Filter
        = select_tag 'event[filter_id]', filter_options_for_select(default_filter_name), :id => 'event_filter_id'
        %span#reference-links
          Reference:
          %span{:id => 'filter-reference-link-event'}
            = link_to_function "Filter", "show_filter_reference();"
      %p.title
        = f.label :asset_id, "Image"
      %p
        Select an image to attach it to this event. A selected image can be detached from the event by selecting it again.
      .image_picker
        = select :event, :asset_id, Asset.images.collect {|a| [ a.title, a.id ] }, {:include_blank => 'None'}, :class => "selectbox images_input"
        %ul.images
          - first_image = Asset.images.first
          - last_image = Asset.images.last
          - Asset.images.each do |image|
            - css_classes = []
            - css_classes << "active" if @event.asset && @event.asset.id == image.id
            - css_classes << "first" if image == first_image
            - css_classes << "last" if image == last_image
            %li{:class => css_classes.join(' ')}
              %a{:href=>image.thumbnail('upcoming_exhibition_thumb')}
                %img{:src=>image.thumbnail('upcoming_exhibition_thumb'), :width=>image.width('upcoming_exhibition_thumb'), :height=>image.height('upcoming_exhibition_thumb'), :alt=>image.title}
  %span.clear &nbsp;
  = javascript_tag "$('event_name').activate()"
  %p.buttons
    = save_model_button(@event)
    = save_model_and_continue_editing_button(@event)
    or
    = link_to('Cancel', admin_events_url)
#popups
  #filter-reference-popup.popup{ :style => "display:none;" }
    %h3
      %span#filter-type= default_filter_name
      Reference
    #filter-reference= filter_reference
    %p
      = link_to 'Close', "#", :class => 'close'
